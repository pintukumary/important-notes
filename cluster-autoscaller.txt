Install AWS CLI In Window.

a>. open cmd and run as administrator
  -> msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi
  -> msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi /qn
  
b>. To Check Aws cli installed version
  -> aws --version
------------------------------------------------

Setup Kubectl and Eksctl in window.

a>. open Powershell and run as administrator
  -> curl.exe -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.33.0/2025-05-01/bin/windows/amd64/kubectl.exe
  -> Get-FileHash kubectl.exe

b>. To check Kubectl Version
  -> kubectl version --client
  
 ------------------------------------------------
 
Configure AWS CLI In Window Server.

a>. open cmd and run as administrator.
  -> aws configure  (Enter Access-key , Secret-key and Region atleast)
  
----------------------------------------------------

Create AWS EKS CLUSTER using eksctl command.

## Before Create Eks - Create EKS iam Role to attach in eks and node group.
  -> Click on AWS IAM ROLE Service and Create Role Then Choose eks - one fole Eks Cluster
  -> For Second NodeGroup create ec2 role and give policy of default ( AmazonEC2ContainerRegistryReadOnly , AmazonEKS_CNI_Policy , AmazonEKSWorkerNodePolicy)

a>. aws eks create-cluster --region <ap-south-1> --name <dev-Cluster> --kubernetes-version 1.32 --role-arn arn:aws:iam::<442426854839>:role/<aws-eks-dev-cluster-iam-role> --resources-vpc-config subnetIds=<subnet-0e8e34d554f17d67e>,<subnet-08397d471eddfb2c1>,securityGroupIds=<sg-0efd4358e8659eee5>
 
b>. To Create node-group inside EKS CLUSTER
  -> aws eks create-nodegroup  --cluster-name dev-cluster --nodegroup-name dev-nodegroup --node-role arn:aws:iam::442426854839:role/aws-eks-dev-cluster-role-ng --subnets "subnet-0e8e34d554f17d67e" "subnet-08397d471eddfb2c1" --scaling-config minSize=1,maxSize=3,desiredSize=1 --capacity-type ON_DEMAND --instance-types "t3.medium" --disk-size 50 --region ap-south-1
 
c>. To check Cluster Status.
  -> aws eks describe-cluster --region region-code --name my-cluster --query "cluster.status"
  
Update KUBE-CONFIG in window cmd to configure aws eks cluster.

a>. aws eks update-kubeconfig --region <region-code> --name <my-cluster>
b>. To Check Node Run command.
  -> kubectl get nodes

--------------------------------------------------------
Install choco in window to install eksctl.
  -> Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

a>. Run choco command to install eksctl
  -> choco install eksctl
  
-------------------------------------------------------

Configure Aws cluster-autoscaller

a>. Create IAM POLICY (POLICY-Name : <AmazonEKSClusterAutoscalerPolicy>)

------------------------------------------------------------------

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:DescribeAutoScalingInstances",
                "autoscaling:DescribeLaunchConfigurations",
                "autoscaling:DescribeScalingActivities",
                "ec2:DescribeImages",
                "ec2:DescribeInstanceTypes",
                "ec2:DescribeLaunchTemplateVersions",
                "ec2:GetInstanceTypesFromInstanceRequirements",
                "eks:DescribeNodegroup"
            ],
            "Resource": [
                "*"
            ]
        },
        {
            "Effect": "Allow",
            "Action": [
                "autoscaling:SetDesiredCapacity",
                "autoscaling:TerminateInstanceInAutoScalingGroup"
            ],
            "Resource": [
                "*"
            ]
        }
    ]
}

--------------------------------------------------------------------

Create IAM POLICY from Window Powershell Command.

  -> aws iam create-policy `
--policy-name AmazonEKSClusterAutoscalerPolicy `
--policy-document file://cluster-autoscaler-policy.json


b>. Create Iam-OIDC provider by below command for required cluster.

  -> eksctl utils associate-iam-oidc-provider `
  --region <ap-south-1> `
  --cluster <dev-Cluster> `
  --approve

c>. Create IAM ROLE And Attach IAM POLICY Using Command in Powershell.

  -> eksctl create iamserviceaccount `
  --cluster=<cluster-name> \
  --namespace=kube-system \
  --name=cluster-autoscaler \
  --attach-policy-arn=<IAM POLICY ARN> \
  --override-existing-serviceaccounts \
  --approve


D>. Now apply below file and rename CLUSTER NAME and KUBERNETES-VERSION LIKE - 1.32.0 , FILE-NAME - cluster-autoscaler.yml

--------------------------------------------------------------------------------

---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
  name: cluster-autoscaler
  namespace: kube-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cluster-autoscaler
  labels:
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
rules:
  - apiGroups: [""]
    resources: ["events", "endpoints"]
    verbs: ["create", "patch"]
  - apiGroups: [""]
    resources: ["pods/eviction"]
    verbs: ["create"]
  - apiGroups: [""]
    resources: ["pods/status"]
    verbs: ["update"]
  - apiGroups: [""]
    resources: ["endpoints"]
    resourceNames: ["cluster-autoscaler"]
    verbs: ["get", "update"]
  - apiGroups: [""]
    resources: ["nodes"]
    verbs: ["watch", "list", "get", "update"]
  - apiGroups: [""]
    resources:
      - "namespaces"
      - "pods"
      - "services"
      - "replicationcontrollers"
      - "persistentvolumeclaims"
      - "persistentvolumes"
    verbs: ["watch", "list", "get"]
  - apiGroups: ["extensions"]
    resources: ["replicasets", "daemonsets"]
    verbs: ["watch", "list", "get"]
  - apiGroups: ["policy"]
    resources: ["poddisruptionbudgets"]
    verbs: ["watch", "list"]
  - apiGroups: ["apps"]
    resources: ["statefulsets", "replicasets", "daemonsets"]
    verbs: ["watch", "list", "get"]
  - apiGroups: ["storage.k8s.io"]
    resources: ["storageclasses", "csinodes", "csidrivers", "csistoragecapacities"]
    verbs: ["watch", "list", "get"]
  - apiGroups: ["batch", "extensions"]
    resources: ["jobs"]
    verbs: ["get", "list", "watch", "patch"]
  - apiGroups: ["coordination.k8s.io"]
    resources: ["leases"]
    verbs: ["create"]
  - apiGroups: ["coordination.k8s.io"]
    resourceNames: ["cluster-autoscaler"]
    resources: ["leases"]
    verbs: ["get", "update"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: cluster-autoscaler
  namespace: kube-system
  labels:
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
rules:
  - apiGroups: [""]
    resources: ["configmaps"]
    verbs: ["create", "list", "watch"]
  - apiGroups: [""]
    resources: ["configmaps"]
    resourceNames: ["cluster-autoscaler-status", "cluster-autoscaler-priority-expander"]
    verbs: ["delete", "get", "update", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cluster-autoscaler
  labels:
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-autoscaler
subjects:
  - kind: ServiceAccount
    name: cluster-autoscaler
    namespace: kube-system

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: cluster-autoscaler
  namespace: kube-system
  labels:
    k8s-addon: cluster-autoscaler.addons.k8s.io
    k8s-app: cluster-autoscaler
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: cluster-autoscaler
subjects:
  - kind: ServiceAccount
    name: cluster-autoscaler
    namespace: kube-system

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cluster-autoscaler
  namespace: kube-system
  labels:
    app: cluster-autoscaler
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cluster-autoscaler
  template:
    metadata:
      labels:
        app: cluster-autoscaler
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '8085'
    spec:
      priorityClassName: system-cluster-critical
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      serviceAccountName: cluster-autoscaler
      containers:
        - image: registry.k8s.io/autoscaling/cluster-autoscaler:v1.26.2
          name: cluster-autoscaler
          resources:
            limits:
              cpu: 100m
              memory: 600Mi
            requests:
              cpu: 100m
              memory: 600Mi
          command:
            - ./cluster-autoscaler
            - --v=4
            - --stderrthreshold=info
            - --cloud-provider=aws
            - --skip-nodes-with-local-storage=false
            - --expander=least-waste
            - --node-group-auto-discovery=asg:tag=k8s.io/cluster-autoscaler/enabled,k8s.io/cluster-autoscaler/<YOUR CLUSTER NAME>
          volumeMounts:
            - name: ssl-certs
              mountPath: /etc/ssl/certs/ca-certificates.crt # /etc/ssl/certs/ca-bundle.crt for Amazon Linux Worker Nodes
              readOnly: true
          imagePullPolicy: "Always"
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            readOnlyRootFilesystem: true
      volumes:
        - name: ssl-certs
          hostPath:
            path: "/etc/ssl/certs/ca-bundle.crt"
			
----------------------------------------------------------------------------------------------------------			
			
  -> kubectl apply -f cluster-autoscaler.yml
  
e>. Now Verify Cluster-autoscaler pod are in running state or not by below command.

  -> kubectl get pods -n kube-system
  
-----------------------------------------------------------------------------------------

Install kubernetes-helm using choco command.

Install choco in window to install Kubernetes-HELM.

  -> Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))

Install kubernetes-helm using choco command in window powershell. 

  -> choco install kubernetes-helm
  
